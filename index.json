[{"uri":"https://johnxlivingston.github.io/DolibarrPickup/dev/mobile_machine/","title":"API de l&#39;application Mobile","tags":[],"description":"","content":"Application mobile : Automate L\u0026rsquo;application mobile utilise un automate à état fini pour son fonctionnement.\nL\u0026rsquo;automate est décrit dans le fichier mobile.ts.\nÀ l\u0026rsquo;exécution, on aura une pile (stack) qui retiendra tous les choix successifs, et toutes les valeurs des différents formulaires rencontrés.\nDéfinition de l\u0026rsquo;automate La définition de l\u0026rsquo;automate est un object javascript.\nChaque clé de cet objet représente un écran.\nL\u0026rsquo;écran initial doit avoir pour clé «init».\nChaque état est ensuite décrit par un object javascript. La clé type donne le type d\u0026rsquo;écran.\nÉtats Le présent chapitre liste les différents états et leurs différentes options.\nState La classe State est la classe de base. Les options qu\u0026rsquo;auront tous les autres états :\ntype Le type de l\u0026rsquo;état. Le fichier index.ts va se baser sur cette valeur pour instancier la bonne classe.\nlabel Le nom de l\u0026rsquo;écran. Sera affiché en haut.\nStateChoice La classe StateChoice représente un écran qui proposera plusieurs choix, sous forme de boutons.\nchoices L\u0026rsquo;option choices est un tableau d\u0026rsquo;objets de la forme :\n{  label: \u0026#39;Le libellé du choix\u0026#39;,  value: \u0026#39;La valeur associée\u0026#39;, // c\u0026#39;est la valeur qui sera mise dans la stack  goto: \u0026#39;stateX\u0026#39;, // vers quel state aller quand on fait ce choix  name: \u0026#39;xxx\u0026#39; // Optionnel. voir plus loin } Le champ name est optionnel. Il permet de changer le nom du champ qui sera stocké dans la stack (par défaut c\u0026rsquo;est le nom de l\u0026rsquo;état courant).\nStateForm La classe StateForm représente un formulaire.\ngoto Vers quel état aller quand le formulaire est validé.\nfields Un tableau de définition de champs.\nCe code étant encore amené à beaucoup bouger, la documentation de ce qu\u0026rsquo;est un field est volontairement incomplète. On ne retrouve ici que les attributs de base, communs à tous les types de champs.\ntype Le type du champ (varchar, text, integer, select, \u0026hellip;).\nname Le nom technique du champs. Ce nom sera la clé utilisée pour la sauvegarde des données.\nlabel Le libellé du champs.\nmandatory Si le champ est obligatoire ou non (booléen).\ndefault (optionnel) Valeur par défaut du champ.\nmaxlength (optionnel) Longueur max de la valeur.\nnotes (optionnel) Permet d\u0026rsquo;ajouter des annotations à coté d\u0026rsquo;un champs, pour guider l\u0026rsquo;usage.\nPlusieurs formes possibles :\n{  label: \u0026#39;Ceci est une note...\u0026#39; } On peut aussi se baser sur des choix précédemment fait (et donc dans la stack) pour peronnaliser les notes à partir d\u0026rsquo;une liste remontée du backend.\nPar exemple, le backend a une liste de tags, pour chaque tag une note optionnelle à afficher. On va donc charger une liste de tags depuis le backend, chercher le tag qui est actuellement appliqué au produit, et afficher la note correspondante.\ninterface {  load: string, // Le nom de la source backend à utiliser (exemple : les pcat)  basedOnValueOf: string, // nom de champs qu\u0026#39;on va chercher dans la stack. On utilisera la valeur de ce champs pour filtrer  key: string, // le champs clé dans la source de donnée, dans lequel il vaut chercher la valeur de la stack (ex: rowid)  field: string, // le nom du champs de la source de donnée qui contient les notes à afficher (ex: notes) } StatePick La classe StatePick proposera de sélectionner une valeur dans une ou plusieurs liste(s) (en utilisant des widgets de type «autocomplete»).\nkey La clé qui sera utilisée pour charger la liste depuis le backend.\nfields On peut donc sélectionner une ligne avec un ou plusieurs champs successifs. Exemple : d\u0026rsquo;abord la marque, puis la référence. La liste des références sera filtrée en fonction de la marque préalablement choisie.\nLa définition d\u0026rsquo;un field :\ninterface PickField {  name: string, // le nom du champs tel qu\u0026#39;il sera stocké dans la stack  label: string, // le libellé du champs  applyFilter?: \u0026#39;lowerCase\u0026#39; | \u0026#39;upperCase\u0026#39; | \u0026#39;localeLowerCase\u0026#39; | \u0026#39;localeUpperCase\u0026#39; // un filtre à appliquer aux valeurs pour les homogénéiser. } primaryKey Nom du champs dans la source de donnée qui contient la valeur à stocker dans la stack (la clé primaire).\ngoto et itemGotoField(optionnel) L\u0026rsquo;état où aller après avoir sélectionné une valeur.\nChaque item peut surcharger cette valeur. Si itemGotoField est fourni, on cherchera un champs de ce nom dans l\u0026rsquo;item sélectionnée. Si la source a fourni une valeur, ce sera le nom du state vers lequel aller pour cette valeur spécifique.\nAinsi, le backend peut piloter le comportement de l\u0026rsquo;automate. Par exemple, afficher un formulaire différent en fonction de la catégorie de produit.\ncreationGoto / creationLabel (optionnel) Si fourni, un bouton «créer nouveau» sera affiché. La valeur est le state dans lequel aller.\ncreationLabel permet de personnaliser le libellé du bouton.\nStateSelect La classe StateSelect est un état qui affichera un select.\noptions interface Option {  value: string,  label: string } StateShow La classe StateShow représente une page va afficher un objet remonté du backend. Par exemple une fiche produit.\nkey Le type d\u0026rsquo;objet (clé pour la source backend). Par exemple product.\nprimaryKey Nom de la clé à chercher dans la stock, pour avoir l\u0026rsquo;id à chercher niveau backend. Par exemple product si dans ma stack j\u0026rsquo;ai un champ product dont la valeur est l\u0026rsquo;id produit.\nfields Les champs à afficher. Voir le code pour la doc (le code bouge encore, ce sera à documenter plus tard).\nokGoto (optionnel) Affiche un bouton «ok» qui ira sur le state correspondant.\naddGoto / addLabel (optionnel) Affiche un bouton «ajouter» qui ira sur le state correspondant.\naddLabel permet de personnaliser le libellé du bouton.\nStateVirtual La classe StateVirtual est un état virtuel qui avance automatiquement.\nStateCompute La classe StateCompute est un état virtuel qui permet d\u0026rsquo;effectuer des modifications sur les valeurs en stack.\nPar exemple d\u0026rsquo;injecter les valeurs de la stack dans un template, et de de s\u0026rsquo;en serveur pour générer une description.\nCette classe n\u0026rsquo;est pas documentée pour l\u0026rsquo;instant, car non utilisée et sujette à changements.\nStateSave La classe StateSave permet de faire un récapitulatif des données dans la stack, et de proposer de les enregistrer.\nDocumentation à faire.\nNotes Pour débuguer, on peut accéder à la machine dans la console JS du navigateur via window.pickupMobileMachine. La stack est dans window.pickupMobileMachine.stack. On peut en avoir une version «lisible à l\u0026rsquo;oeil humain» via window.pickupMobileMachine.stack.dumpForHuman().\nOn peut également débuguer le cache des données remontées du backend via window.pickupMobileDebugDataCache().\nIl y a une fonction qui essaie de trouver les problèmes de définition de l\u0026rsquo;automate (status manquants, template manquant, etc\u0026hellip;) : window.pickupMobileMachine.findProblems().then(console.log).\n"},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/presentation/pickups/1-pickup/","title":"La fiche collecte","tags":[],"description":"","content":"Chaque collecte de matériel ou matériaux chez un tiers (appelé «Donneur» dans l\u0026rsquo;application) donne lieu à la saisie d\u0026rsquo;une fiche de collecte.\nLa fiche de collecte permet de renseigner les éléments suivants:\n date de la collecte tiers ayant donné les matériaux/matériels le stock dans lequel intégrer les produits de cette collecte liste des matériaux/matériels donnés, leurs quantités, leur poids, \u0026hellip;                "},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/presentation/pickups/","title":"Les collectes","tags":[],"description":"","content":"Les collectes "},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/presentation/","title":"Présentation du module","tags":[],"description":"","content":"Fonctionnalités Le module de Collecte est destiné à des ressourceries/recycleries, et permet de gérer les entrées de matériaux ou matériels.\n"},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/user/mobileapp/","title":"Application mobile","tags":[],"description":"","content":"Application mobile L\u0026rsquo;application mobile permet de créer rapidement de nouvelles collectes, et d\u0026rsquo;y ajouter les produits collectés.\n"},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/presentation/mobileapp/intro/","title":"En deux mots","tags":[],"description":"","content":"Ce module est accompagné d\u0026rsquo;une application destinées à un usage mobile.\nIl s\u0026rsquo;agit d\u0026rsquo;une simple page web que vous pouvez ouvrir avec le navigateur d\u0026rsquo;un smartphone, d\u0026rsquo;une tablette, ou même d\u0026rsquo;un ordinateur classique.\nElle est conçue pour minimiser les accès au réseau, afin de pouvoir fonctionner via un réseau mobile de qualité incertaine.\nElle permet de :\n créer des fiches collectes ajouter des produits aux fiches de collectes créer les fiches tiers manquantes créer les fiches produits manquantes  Cette application est conçue pour être très facilement modifiable, afin de la faire correspondre au mieux à vos besoins. Si l\u0026rsquo;enchaînement des écrans, ou les champs de formulaires présents, ne correspondent pas à vos besoin, contactez-moi et je vous ferais un devis pour y incorporer vos besoins.\n Il est possible de configurer le module de sorte à ne donner des droits que via cette application mobile. Ainsi, vous pouvez permettre à des saisonniers/stagiaires/\u0026hellip; de renseigner les collectes, sans leur donner accès au reste de votre Dolibarr.\n Cette partie est encore en cours de rédaction, et est très incomplète.\n "},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/admin/setup/features/","title":"Fonctionnalités","tags":[],"description":"","content":" Cette documentation n\u0026rsquo;a pas encore été rédigée. Elle arrivera prochainement.\n "},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/admin/install/","title":"Installation","tags":[],"description":"","content":" Pour l\u0026rsquo;instant ce module n\u0026rsquo;est pas encore disponible sur le Dolistore. Il faut le télécharger et l\u0026rsquo;installer manuellement.\n Ce module est gratuit et sous license libre. Si on vous demande de payer pour le télécharger, c\u0026rsquo;est que vous n\u0026rsquo;êtes pas sur le bon site.\n Pour installer ce module, commencez par télécharger son archive. Rendez-vous sur l\u0026rsquo;un des liens ci-dessous, repérez la version la plus récente (fichier avec un nom de la forme «module_pickup-X.X.X.zip», où X.X.X représente le numéro de version), et téléchargez le fichier :\n Gitlab Globenet Github  Une fois le fichier .zip téléchargé, rendez-vous sur la page «Accueil \u0026gt; Configuration \u0026gt; Modules/Applications» de votre Dolibarr, puis dans l\u0026rsquo;onglet «Déployer/Installer un module externe» :\nCliquez sur le bouton «Parcourir\u0026hellip;» et sélectionnez le fichier que vous avez téléchargé.\nRendez-vous ensuite dans l\u0026rsquo;onglet «Modules/Applications disponibles» et recherchez le module de collecte (vous pouvez éventuellement vous aider de l\u0026rsquo;un des champ de recherche pour le trouver plus rapidement) :\nVérifiez que le module est bien activé. Ou activez-le le cas échéant.\nVous pouvez ensuite passer à sa configuration.\n"},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/user/mobileapp/intro/","title":"Introduction","tags":[],"description":"","content":"L\u0026rsquo;application mobile, se trouve à l\u0026rsquo;adresse /custom/pickup/mobile.php par rapport à votre installation Dolibarr.\nVous pouvez également retrouver le lien en utilisant l\u0026rsquo;entrée «Application mobile» dans le menu du module collecte: "},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/admin/setup/rights/","title":"Les droits","tags":[],"description":"","content":" Cette documentation n\u0026rsquo;a pas encore été rédigée. Elle arrivera prochainement.\n "},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/user/mobileapp/pagetypes/pick/","title":"Écrans de sélection","tags":[],"description":"","content":"Ces écrans vous propose de sélectionner des items déjà existants (collecte, produit, \u0026hellip;).\nOuvrez la liste déroulante pour visionner les items disponibles.\nSi la liste contient beaucoup d\u0026rsquo;items, vous pouvez lancer une recherche pour filtrer les résultats.\nCertains écrans peuvent vous proposer plusieurs choix successifs. Les choix proposés sont filtrés en fonction des choix précédents. Par exemple, si vous avez la fonctionnalité «Marque produit» activée sur votre module, la sélection d\u0026rsquo;un produit vous proposera de d\u0026rsquo;abord sélectionner la marque, puis la référence :\nSur certains écrans, et en fonction du paramétrage du module sur votre installation, vous serez autorisé à créer de nouveaux items (nouvelles collectes, nouvelle fiche produit, \u0026hellip;). Dans ce cas, il y aura un bouton de création dans la barre d\u0026rsquo;action, en bas à gauche de votre écran.\n "},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/user/mobileapp/pagetypes/show/","title":"Fiches","tags":[],"description":"","content":"En général, après avoir sélectionné un item (via un écran de sélection), vous arriverez sur une fiche reprenant les caractéristiques de l\u0026rsquo;item sélectionné.\n"},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/presentation/mobileapp/screenshots/","title":"Captures d&#39;écran","tags":[],"description":"","content":""},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/admin/setup/","title":"Configurer","tags":[],"description":"","content":" Cette documentation n\u0026rsquo;a pas encore été rédigée. Elle arrivera prochainement.\n "},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/user/mobileapp/pagetypes/form/","title":"Formulaires","tags":[],"description":"","content":"Ces écrans vous permettent de créer de nouveaux items (collecte, produit, \u0026hellip;). Les champs présents dans les formulaires dépendent en général de la configuration de votre installation, et peuvent varier grandement par rapport à ce que vous verrez dans cette documentation.\nLe formulaire est composés de divers champs à remplir.\nLes champs dont les libellés sont en gras sont des champs obligatoires. Vous devez les remplir pour valider le formulaire.\n Il existe différents types de champs:\n texte simple (sur une seule ligne) texte (avec une saisie possible sur plusieurs lignes) date liste déroulantes cases à cocher \u0026hellip;  Quand votre saisie est finie, vous pouvez utiliser le bouton «Ok» en bas à gauche pour passer à l\u0026rsquo;écran suivant.\n"},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/presentation/mobileapp/","title":"L&#39;application mobile","tags":[],"description":"","content":"L\u0026rsquo;application mobile "},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/user/mobileapp/navigation/","title":"Navigation","tags":[],"description":"","content":" L\u0026rsquo;application mobile se souvient de l\u0026rsquo;écran sur lequel vous êtes. Vous pouvez fermer et rouvrir le navigateur, vous reprendrez la saisie là où vous en étiez.\n L\u0026rsquo;application mobile est découpée en 3 zones principales. 1. Barre de navigation La barre du haut est la barre de navigation. Elle contient :\n un bouton «retour arrière» (flèche vers la gauche) qui permet de revenir à l\u0026rsquo;écran précédent pour corriger la saisie un titre correspondant à la page sur laquelle vous êtes un bouton «Accueil» qui permet de revenir à l\u0026rsquo;écran d\u0026rsquo;accueil de l\u0026rsquo;application mobile  2. Zone de travail La zone de travail occupe la majeure partie de l\u0026rsquo;écran. C\u0026rsquo;est là que vous allez visionner ou modifier les données.\n3. Barre d\u0026rsquo;action La barre du bas est la barre d\u0026rsquo;action.\nElle vous proposera, en fonction de l\u0026rsquo;écran sur lequel vous êtes, des actions comme :\n sélectionner un item créer un nouvel item (collecte, produit, \u0026hellip;) sauvegarder un formulaire confirmer une modification \u0026hellip;  Sur certains écrans, il y a également un bouton «Recharger». En effet, pour minimiser les accès réseaux (notamment quand vous êtes en déplacement, et que vous utilisez un réseau mobile de qualité incertaine), l\u0026rsquo;application mobile garde en mémoire les données dont elle a besoin. Toutefois, il peut arriver que ces données ne soient plus à jour (parce que quelqu\u0026rsquo;un d\u0026rsquo;autre a modifié des choses, ou parce que vous avez plusieurs onglets ouverts). Dans ce cas, le bouton «Recharger» vous permet de récupérer des données à jour.\n"},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/user/mobileapp/pagetypes/save/","title":"Sauvegarde","tags":[],"description":"","content":"Après avoir saisi des données (que ce soit des créations d\u0026rsquo;item, ou l\u0026rsquo;ajout d\u0026rsquo;un produit à une fiche collecte), vous arriverez sur un écran de sauvegarde. Cet écran récapitule les données qui sont sur le point d\u0026rsquo;être enregistrées.\nAttention, il peut arriver que plusieurs écrans s\u0026rsquo;enchaînent avant une page de sauvegarde. Dans ce cas, les modifications ne seront pas envoyées à Dolibarr tant que vous n\u0026rsquo;aurez pas passé l\u0026rsquo;écran de sauvegarde.\n Si les données affichées sont correctes, vous pouvez cliquer sur le bouton «Enregistrer» pour sauvegarder les données sur le serveur Dolibarr.\nSi tout se passe bien, vous serez ensuite généralement redirigé sur la fiche de l\u0026rsquo;item créé.\n"},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/admin/update/","title":"Mise à jour","tags":[],"description":"","content":" Pour l\u0026rsquo;instant il n\u0026rsquo;y a pas encore de moyen d\u0026rsquo;être prévenu automatiquement de l\u0026rsquo;arrivée de nouvelles versions. Il est probable qu\u0026rsquo;une mailing-list soit créé très prochainement.\n Vérifiez les mises à jours disponibles Avant toute mise à jour, il faut vérifier la version qui est actuellement utilisée sur votre Dolibarr. Celle-ci est affichée sous l\u0026rsquo;icone du module (ici il s\u0026rsquo;agit de la «1.1.2») :\nEnsuite, aller voir le fichier «Changelog» (journaux des modifications) sur l\u0026rsquo;un des liens ci-dessous :\n Gitlab Globenet Github  Ce fichier liste pour chaque numéro de version les modifications qui ont été effectuées.\nParcourez ce fichier en remontant de votre version actuelle jusqu\u0026rsquo;à la version que vous comptez installer. Vérifiez qu\u0026rsquo;il n\u0026rsquo;y a pas de section «Remarques importantes» qui indiqueraient d\u0026rsquo;éventuelles incompatibilités ou une procédure de mise à jour spécifique à suivre.\n Une fois que vous avez-pris connaissance d\u0026rsquo;éventuelles instructions spécifiques, vous pouvez aller télécharger la version du module qui vous intéresse, via la même procédure qu\u0026rsquo;indiquer dans le guide d\u0026rsquo;installation, c\u0026rsquo;est à dire en téléchargeant l\u0026rsquo;archive depuis l\u0026rsquo;un des liens suivants :\n Gitlab Globenet Github  Installer la nouvelle version du module Suivez-la même procédure que pour la première installation : rendez-vous sur la page «Accueil \u0026gt; Configuration \u0026gt; Modules/Applications» de votre Dolibarr, puis dans l\u0026rsquo;onglet «Déployer/Installer un module externe», et envoyez le fichier :\n              Il vous faut ensuite désactiver puis réactiver le module. C\u0026rsquo;est la procédure habituelle dans Dolibarr pour que les modules puissent appliquer leurs changements de structure.\n "},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/user/mobileapp/pagetypes/","title":"Type d&#39;écrans","tags":[],"description":"","content":" L\u0026rsquo;application mobile a différents types d\u0026rsquo;écrans. Cette section décrit les différents types.\n L\u0026rsquo;enchainement de ces écrans dans votre application mobile peut varier grandement en fonction du paramétrage du module. Mais les fonctionnements décrit ici restent toujours valables.\n "},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/user/","title":"Documentation utilisateur⋅rice","tags":[],"description":"","content":" Cette partie est encore en cours de rédaction, et est très incomplète\n "},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/user/mobileapp/workflow/","title":"Flux de travail","tags":[],"description":"","content":" L\u0026rsquo;application mobile est entièrement paramétrable. Cette page décrit de manière générique l\u0026rsquo;enchaînement des différents écrans, mais cela peut varier grandement d\u0026rsquo;une installation à l\u0026rsquo;autre. De manière générale, les élements entourés en pointillés peuvent être désactivés.\n graph TD; PickCollecte[Sélection d'une collecte] subgraph Création d'une fiche collecte PickEntrepot[Sélection de l'entrepot] PickSociete[Sélection du donneur] subgraph Création du donneur FormSociete[Formulaire donneur] SaveSociete[Sauvegarde donneur] end ShowSociete[Fiche donneur] FormCollecte[Formulaire collecte] SaveCollecte[Sauvegarde collecte] end subgraph Ajout de produits sur la fiche ShowCollecte[Fiche collecte] PickProduit[Sélection de fiche produit] subgraph Création de fiche produit PickCategorie[Sélection de la catégorie] FormProduit[Formulaire produit] FormProduitPoids[Saisie du poids] SaveProduit[Sauvegarde produit] end ShowProduit[Fiche produit] FormQuantite[Saisie de la quantité] SaveLigne[Sauvegarde de la ligne] end PickCollecte --|Nouvelle collecte| PickEntrepot PickEntrepot -- PickSociete PickSociete -- ShowSociete PickSociete --|Nouveau donneur| FormSociete FormSociete -- SaveSociete SaveSociete -- ShowSociete ShowSociete -- FormCollecte FormCollecte -- SaveCollecte PickCollecte -- ShowCollecte SaveCollecte -- ShowCollecte ShowCollecte -- PickProduit PickProduit -- ShowProduit PickProduit --|Nouveau produit| PickCategorie PickCategorie -- FormProduit FormProduit -- FormProduitPoids FormProduitPoids -- SaveProduit SaveProduit -- ShowProduit ShowProduit -- FormQuantite FormQuantite -- SaveLigne SaveLigne -- ShowCollecte style PickEntrepot stroke-dasharray: 5 5 style PickCategorie stroke-dasharray: 5 5  L\u0026rsquo;écran de sélection de collecte ne montre que les collectes que vous avez créé et qui sont encore en statut «Brouillon». Il est possible, suivant vos droits d\u0026rsquo;accès, que vous puissiez aussi voir les collectes créées par les autres utilisateur⋅rice⋅s, mais dans tous les cas seules celles en statut «Brouillon» seront listées.\n "},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/presentation/pickups/4-workflow/","title":"Statuts","tags":[],"description":"","content":"La fiche de collecte passe par plusieurs statuts.\nChacun de ces statuts est accompagné de droits associés, permettant ainsi de définir avec précision quels utilisateur⋅rice⋅s ou groupes d\u0026rsquo;utilisateur⋅rice⋅s peuvent intervernir, et à quelles étapes.\n Brouillon À ce stade on peut ajouter des produits, modifier leurs quantités, poids, \u0026hellip;\nEn cours de traitement Ici il n\u0026rsquo;est plus possible de modifier le contenu de la collecte, uniquement ses méta-données. Il est possible de revenir au statut Brouillon si nécessaire.\nEn attente de signature À partir du moment où l\u0026rsquo;on passe dans cet état, les produits récoltés sont intégrés au module de Stock de Dolibarr. Les mouvements de stocks associés sont créés.\n              Une fois la fiche de collecte en attente de signature, il n\u0026rsquo;est plus possible de revenir en arrière.\n Un bon de collecte au format PDF est généré.\nSignée Le tiers a signé le bon de collecte, le cycle de celle-ci est donc terminé.\n"},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/admin/","title":"Administration/Configuration","tags":[],"description":"","content":" Cette partie est encore en cours de rédaction, et est très incomplète.\n "},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/presentation/pickups/8-deee/","title":"DEEE","tags":[],"description":"","content":"Le module collecte est capable de gérer les DEEE (Déchets d’équipements électriques et électroniques).\nSi vous n\u0026rsquo;êtes pas concerné par les DEEE, il est tout à fait possible de les désactiver.\n Sur la fiche produit Un champs «Type DEEE» est automatiquement ajouté aux formulaire des fiches produits, permettant de préciser à quelle catégorie de déchet le produit appartient.\nDans la fiche en mode lecture, ce champs est complété d\u0026rsquo;une case à cochée «DEEE» calculé automatiquement.\nDans les listes de produits, les colonnes «DEEE» et «Type DEEE» sont ajoutées (on peut choisir de les afficher/masquer).\nSur la fiche de collecte Les informations de DEEE, ainsi que les poids de chaque catégories sont repris sur la fiche de collecte et sur le bon de collecte.\n              Dans les rapports Il est ensuite possible de faire des rapports reprenant les poids collectés pour chaque catégorie.\nDes évolutions sont à venir sur les écrans de rapports. Si vous avez des besoins spécifiques, n\u0026rsquo;hésitez pas à me contacter pour en discuter.\n "},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/dev/","title":"Contribuer","tags":[],"description":"","content":" Cette partie est encore en cours de rédaction, et est très incomplète.\n "},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/presentation/pickups/9-others/","title":"Divers","tags":[],"description":"","content":"Fiche produit Sur la fiche produit, un onglet collecte apparaît, permettant de voir en un coup d\u0026rsquo;œils quelles collectes ont ramenés quelle quantité de chaque produit.\n "},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/presentation/reports/","title":"Les rapports","tags":[],"description":"","content":" Le module de Collecte permet de générer divers rapports, permettant de faire le bilan annuel (ou sur toute autre période de temps) des produits collectés.\n Des évolutions sont à venir sur les écrans de rapports. Si vous avez des besoins spécifiques, n\u0026rsquo;hésitez pas à me contacter pour en discuter.\n               "},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/support/","title":"Support","tags":[],"description":"","content":"Vous rencontrez une difficulté, avez trouvé un bug, ou souhaitez un devis pour un développement spécifique ?\nVous pouvez m\u0026rsquo;écrire par e-mail à l\u0026rsquo;adresse git.[at].john-livingston.fr.\nSi vous avez un compte Github, vous pouvez également utiliser l\u0026rsquo;issue tracker de Github.\n"},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/","title":"DolibarrPickup","tags":[],"description":"","content":"DolibarrPickup DolibarrPickup est un module pour l\u0026rsquo;ERP/CRM Dolibarr destiné à gérer les collectes que font des ressourceries/recycleries.\nLe projet a été initié par La Ressourcerie Du Spectacle.\nSi vous êtes intéressé⋅e⋅s par ce module et souhaitez l\u0026rsquo;adapter à vos propres besoins, n\u0026rsquo;hésitez pas à contacter John Livingston via l\u0026rsquo;un des dépots d\u0026rsquo;origine :\n https://github.com/JohnXLivingston/DolibarrPickup https://code.globenet.org/john/DolibarrPickup  Le code est publié sous licence GNU GENERAL PUBLIC LICENSE 3.\nBien que conçu et maintenu pour des associations françaises, le projet est multilangue, et peut être aisément traduit (la traduction anglaise US est maintenue en même temps que la française).\n"},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://johnxlivingston.github.io/DolibarrPickup/tags/","title":"Tags","tags":[],"description":"","content":""}]